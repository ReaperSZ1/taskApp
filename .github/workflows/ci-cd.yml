name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main    
      - dependabot/** # Gatilho para PRs do Dependabot
  workflow_dispatch: # Permite executar o pipeline manualmente

jobs:
  test:
    runs-on: ubuntu-latest # Máquina virtual para rodar os testes

    env: # Configuração global para todas as etapas do job
      MONGO_URI_DEV: ${{ secrets.MONGO_URI_DEV }}
      SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      NODE_ENV: development 

    steps:
      # Etapa 1: Fazer checkout do código
      - name: Checkout code
        uses: actions/checkout@v3

      # Etapa 2: Configurar Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
        
      - name: Start MongoDB
        run: |
          docker run -d --name mongodb -p 8081:27017 mongo:latest
        
      # Etapa 3: Instalar dependências do projeto
      - name: Install dependencies
        run: npm install

      - name: Stop any running servers
        run: kill $(lsof -t -i:8081) || true

      # Etapa 4: Iniciar servidor local
      - name: Start local server
        run: npm run start 
    
      # Etapa 5: Verificar se o servidor está em execução
      - name: Wait for server to be ready
        run: |
          echo "Waiting for server to start..."
          for i in {1..5}; do
            curl -s http://localhost:8081/ && break || sleep 3
          done
          echo "Server is up and running!"

      # # Etapa 6: Executar testes Cypress
      # - name: Run Cypress tests
      #   run: npx cypress run --record --key ${{ secrets.CYPRESS_RECORD_KEY }} --browser chrome --spec "cypress/e2e/taskapp/*"
        
      # Etapa 7: testes de integração
      - name: Run integration tests
        run: npm run test-api # Comando para rodar os testes no código do projeto

  deploy:
    needs: test
    runs-on: ubuntu-latest

    env:
      RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
      SERVICE_ID: ${{ secrets.SERVICE_ID }}

    steps:
      - name: Trigger Render deploy
        run: |
          curl -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{"clearCache":true}' \
            https://api.render.com/v1/services/$SERVICE_ID/deploys
