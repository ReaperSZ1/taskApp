name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Permite executar o pipeline manualmente

jobs:
  test:
    runs-on: ubuntu-latest # Máquina virtual para rodar os testes

    steps:
      # Etapa 1: Fazer checkout do código
      - name: Checkout code
        uses: actions/checkout@v3

      # Etapa 2: Configurar Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Etapa 3: Instalar dependências do projeto
      - name: Install dependencies
        run: npm install

      # Etapa 4: Configurar conexão com MongoDB remoto e rodar os testes
      - name: Run tests with remote MongoDB
        run: |
          echo "Setting up MongoDB URI..."
          export MONGO_URI=${{ secrets.REMOTE_MONGO_URI }}  # Usar a URI remota configurada nos GitHub Secrets
          echo "Running tests with remote MongoDB..."
          npm run test-api  # Comando para rodar os testes no código do projeto
        env:
          NODE_ENV: test  # Ambiente de testes
          MONGO_URI: ${{ secrets.REMOTE_MONGO_URI }}  # URI remota do MongoDB

      # Etapa 5: Confirmar se o servidor remoto está acessível antes de rodar os testes
      - name: Confirm remote server connection
        run: |
          echo "Checking connection to remote server..."
          curl -I https://taskapp-481i.onrender.com || exit 1  # Verificar se o servidor remoto está acessível
        env:
          SERVER_URL: https://taskapp-481i.onrender.com  # URL do servidor remoto configurada nos secrets

  
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Render deploy
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"clearCache":true}' \
            https://api.render.com/v1/services/${{ secrets.SERVICE_ID }}/deploys
