{
	"info": {
		"_postman_id": "05eb39af-9639-49c4-82b7-f3bbdf61fe8a",
		"name": "taskApp_Pipeline",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40126037"
	},
	"item": [
		{
			"name": "usuario/login",
			"item": [
				{
					"name": "/login/novo",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const flashMessage = pm.response.headers.get('x-flash-success');\r",
									"pm.test(\"should return a sucess Flash message \", function () {\r",
									"    pm.expect(flashMessage).to.eql('Login realizado com sucesso!');\r",
									"});\r",
									"if(!flashMessage){\r",
									"    console.log('flash error: ' + pm.response.headers.get('x-flash-error'))\r",
									"    pm.test(\"logs\", function() {\r",
									"         console.log('Request Details:', {\r",
									"            url: pm.request.url.toString(),\r",
									"            method: pm.request.method,\r",
									"            headers: pm.request.headers.toJSON(),\r",
									"            body: pm.request.body ? pm.request.body.toString() : 'No Body'\r",
									"        });\r",
									"\r",
									"        console.log('Response Details:', {\r",
									"            status: pm.response.code,\r",
									"            headers: pm.response.headers.all(),\r",
									"            body: pm.response.text()\r",
									"        });\r",
									"    });\r",
									"}\r",
									"// Capturar o cabeçalho Set-Cookie da resposta\r",
									"const setCookieHeader = pm.response.headers.get('Set-Cookie');\r",
									"if (setCookieHeader) {\r",
									"    const cookieValue = setCookieHeader.match(/connect\\.sid=[^;]+/);\r",
									"    if (cookieValue) {\r",
									"        pm.environment.set('CookieAuth', cookieValue[0]);\r",
									"    } else {\r",
									"        console.error('Cookie de autenticação não encontrado no cabeçalho Set-Cookie.');\r",
									"    }\r",
									"       console.log('CookieAuth atualizado:', cookieValue);\r",
									"} else {\r",
									"    console.error('Cabeçalho Set-Cookie ausente na resposta.');\r",
									"}\r",
									"\r",
									"// console.log(pm.response.headers.all())\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "no-redirect",
								"value": "true",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "gabrielsil20177@gmail.com",
									"type": "text"
								},
								{
									"key": "senha",
									"value": "123123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/usuarios/login/novo",
							"host": [
								"{{url}}"
							],
							"path": [
								"usuarios",
								"login",
								"novo"
							]
						}
					},
					"response": []
				}
			],
			"description": "aqui onde o cookie de login é criado e será usado durante o test automatico"
		},
		{
			"name": "app",
			"item": [
				{
					"name": "'/' connected",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{CookieAuth}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "tarefas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"        if (pm.response.code !== 200) {\r",
									"        // Caso o status não seja 200, execute o código dentro do if\r",
									"        console.log('Flash error: ' + pm.response.headers.get('x-flash-error'));\r",
									"\r",
									"        pm.test(\"logs\", function() {\r",
									"            console.log('Request Details:', {\r",
									"                url: pm.request.url.toString(),\r",
									"                method: pm.request.method,\r",
									"                headers: pm.request.headers.toJSON(),\r",
									"                body: pm.request.body ? pm.request.body.toString() : 'No Body'\r",
									"            });\r",
									"\r",
									"            console.log('Response Details:', {\r",
									"                status: pm.response.code,\r",
									"                headers: pm.response.headers.all(),\r",
									"                body: pm.response.text()\r",
									"            });\r",
									"        });\r",
									"    } else {\r",
									"        pm.response.to.have.status(200); // Verificação original\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Each task has required properties\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach(task => {\r",
									"        pm.expect(task).to.have.property(\"title\");\r",
									"        pm.expect(task).to.have.property(\"date\");\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const dia = 12\r",
									"pm.collectionVariables.set('date', '2024-12-' + dia)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{CookieAuth}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/tarefas?data={{date}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tarefas"
							],
							"query": [
								{
									"key": "data",
									"value": "{{date}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "tarefa",
			"item": [
				{
					"name": "/add",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{CookieAuth}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/tarefa/add",
							"host": [
								"{{url}}"
							],
							"path": [
								"tarefa",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "/editar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const flashMessage = pm.response.headers.get('x-flash-success');\r",
									"pm.test(\"should return a sucess Flash message \", function () {\r",
									"    pm.expect(flashMessage).to.eql('Tarefa encontrada com sucesso');\r",
									"});\r",
									"if(!flashMessage){\r",
									"    console.log('flash error: ' + pm.response.headers.get('x-flash-error'))\r",
									"    pm.test(\"logs\", function() {\r",
									"         console.log('Request Details:', {\r",
									"            url: pm.request.url.toString(),\r",
									"            method: pm.request.method,\r",
									"            headers: pm.request.headers.toJSON(),\r",
									"            body: pm.request.body ? pm.request.body.toString() : 'No Body'\r",
									"        });\r",
									"\r",
									"        console.log('Response Details:', {\r",
									"            status: pm.response.code,\r",
									"            headers: pm.response.headers.all(),\r",
									"            body: pm.response.text()\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{CookieAuth}}",
								"type": "text"
							},
							{
								"key": "no-redirect",
								"value": "true",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/tarefa/editar/?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3MmZkM2YxOWY0MDc4OTViMTg3YjY5NiIsImlhdCI6MTczMzUyNjM2OCwiZXhwIjoxNzMzNTI5OTY4fQ.MHHX5E2xvHc4ubOzVSelOGDSDwSJZeJMnBLJfegj-As",
							"host": [
								"{{url}}"
							],
							"path": [
								"tarefa",
								"editar",
								""
							],
							"query": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3MmZkM2YxOWY0MDc4OTViMTg3YjY5NiIsImlhdCI6MTczMzUyNjM2OCwiZXhwIjoxNzMzNTI5OTY4fQ.MHHX5E2xvHc4ubOzVSelOGDSDwSJZeJMnBLJfegj-As"
								}
							]
						},
						"description": "tests que verificam se tarefa foi encontrada ou nao"
					},
					"response": []
				},
				{
					"name": "/novo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('check title is true', function () {\r",
									"    // Obtém o valor armazenado\r",
									"    const randomTitle = pm.variables.get(\"randomTitle\"); \r",
									"    // Obtém o título da resposta\r",
									"    const responseTitle = JSON.parse(responseBody).responseObject.title; \r",
									"    // Compara os dois valores\r",
									"    pm.expect(randomTitle).to.eql(responseTitle); \r",
									"});\r",
									"\r",
									"pm.test('check description is true', function () {\r",
									"    // Obtém o valor armazenado\r",
									"    const randomDescription = pm.variables.get(\"randomDescription\"); \r",
									"    // Obtém o título da resposta\r",
									"    const responseDescription = JSON.parse(responseBody).responseObject.description; \r",
									"    // Compara os dois valores\r",
									"    pm.expect(randomDescription).to.eql(responseDescription); \r",
									"});\r",
									"\r",
									"pm.test('check date is true', function () {\r",
									"    const randomTaskDate = new Date(pm.variables.get(\"randomTaskDate\"));\r",
									"    const responseDate = new Date(JSON.parse(responseBody).responseObject.date);\r",
									"    // Arredonda as datas para remover os milissegundos antes de comparar\r",
									"    pm.expect(randomTaskDate.toISOString().slice(0, -5)).to.eql(responseDate.toISOString().slice(0, -5)); \r",
									"});\r",
									"const flashMessage = pm.response.headers.get('x-flash-success');\r",
									"pm.test(\"should return a sucess Flash message \", function () {\r",
									"    pm.expect(flashMessage).to.eql('Nova Tarefa Criada!');\r",
									"});\r",
									"if(!flashMessage){\r",
									"    console.log('flash error: ' + pm.response.headers.get('x-flash-error'))\r",
									"    pm.test(\"logs\", function() {\r",
									"         console.log('Request Details:', {\r",
									"            url: pm.request.url.toString(),\r",
									"            method: pm.request.method,\r",
									"            headers: pm.request.headers.toJSON(),\r",
									"            body: pm.request.body ? pm.request.body.toString() : 'No Body'\r",
									"        });\r",
									"\r",
									"        console.log('Response Details:', {\r",
									"            status: pm.response.code,\r",
									"            headers: pm.response.headers.all(),\r",
									"            body: pm.response.text()\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"randomTitle\", pm.variables.replaceIn ('{{$randomFullName}}'));\r",
									"pm.environment.set('randomDescription', pm.variables.replaceIn ('{{$randomLoremSentences}}'))\r",
									"\r",
									"// Função para gerar uma data aleatória, excluindo 15 de janeiro de 2025\r",
									"function generateRandomDate() {\r",
									"    let randomDate;\r",
									"    do {\r",
									"        const randomDays = Math.floor(Math.random() * 30);\r",
									"        randomDate = new Date();\r",
									"        randomDate.setDate(randomDate.getDate() + randomDays);\r",
									"    } while (\r",
									"        randomDate.getDate() === 15 &&\r",
									"        randomDate.getMonth() === 0 && // Janeiro é mês 0 em JavaScript\r",
									"        randomDate.getFullYear() === 2025\r",
									"    );\r",
									"    return randomDate;\r",
									"}\r",
									"\r",
									"// Gerar a data aleatória válida\r",
									"const validRandomDate = generateRandomDate();\r",
									"\r",
									"// Salvar a data no ambiente\r",
									"pm.environment.set(\"randomTaskDate\", validRandomDate.toISOString());\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "JSON",
								"value": "true",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "{{CookieAuth}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "title",
									"value": "{{randomTitle}}",
									"type": "text"
								},
								{
									"key": "description",
									"value": "{{randomDescription}}",
									"type": "text"
								},
								{
									"key": "date",
									"value": "{{randomTaskDate}}",
									"type": "text"
								},
								{
									"key": "",
									"value": "{{$randomLoremSentences}}",
									"type": "text",
									"disabled": true
								},
								{
									"key": "title",
									"value": "delete",
									"type": "text",
									"disabled": true
								},
								{
									"key": "description",
									"value": "jooj",
									"type": "text",
									"disabled": true
								},
								{
									"key": "date",
									"value": "2024-12-12",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/tarefa/novo",
							"host": [
								"{{url}}"
							],
							"path": [
								"tarefa",
								"novo"
							]
						},
						"description": "tests que validam se as tarefas foram criadas e com campos corretos"
					},
					"response": []
				},
				{
					"name": "/deletar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const flashMessage = pm.response.headers.get('x-flash-success');\r",
									"pm.test(\"should return a sucess Flash message \", function () {\r",
									"    pm.expect(flashMessage).to.eql('Tarefa deletada com sucesso');\r",
									"});\r",
									"if(!flashMessage){\r",
									"    console.log('flash error: ' + pm.response.headers.get('x-flash-error'))\r",
									"    pm.test(\"logs\", function() {\r",
									"         console.log('Request Details:', {\r",
									"            url: pm.request.url.toString(),\r",
									"            method: pm.request.method,\r",
									"            headers: pm.request.headers.toJSON(),\r",
									"            body: pm.request.body ? pm.request.body.toString() : 'No Body'\r",
									"        });\r",
									"\r",
									"        console.log('Response Details:', {\r",
									"            status: pm.response.code,\r",
									"            headers: pm.response.headers.all(),\r",
									"            body: pm.response.text()\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: 'http://localhost:8081/tarefas?data=2024-12-12',\r",
									"    method: 'GET',\r",
									"    headers: {\r",
									"        Cookie: pm.environment.get('CookieAuth') \r",
									"    }\r",
									"}, function (err, res) {\r",
									"    if (err) {\r",
									"        console.error('Erro ao buscar tarefas:', err);\r",
									"    } else {\r",
									"        // Tente analisar o JSON da resposta\r",
									"        try {\r",
									"            const tarefas = res.json(); // Parse da resposta para JSON\r",
									"\r",
									"            if (Array.isArray(tarefas) && tarefas.length > 0) {\r",
									"                // Pegue o token da primeira tarefa\r",
									"                const tokenDaTarefa = tarefas[0].token;\r",
									"\r",
									"                if (tokenDaTarefa) {\r",
									"                    // Atualize o ambiente com o token\r",
									"                    pm.environment.set('taskToken', tokenDaTarefa);\r",
									"                    console.log('Novo taskToken configurado:', tokenDaTarefa);\r",
									"                } else {\r",
									"                    console.error('Token não encontrado na tarefa.');\r",
									"                }\r",
									"            } else {\r",
									"                console.error('Nenhuma tarefa encontrada ou formato inesperado.');\r",
									"            }\r",
									"        } catch (parseErr) {\r",
									"            console.error('Erro ao parsear a resposta JSON:', parseErr.message);\r",
									"        }\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{CookieAuth}}",
								"type": "text"
							},
							{
								"key": "no-redirect",
								"value": "true",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "{{taskToken}}",
									"type": "text"
								},
								{
									"key": "",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/tarefa/deletar",
							"host": [
								"{{url}}"
							],
							"path": [
								"tarefa",
								"deletar"
							]
						},
						"description": "testa se a tarefa foi deletada ou não usando headers como condição"
					},
					"response": []
				},
				{
					"name": "/editar",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"randomTitle\", pm.variables.replaceIn ('{{$randomFullName}}'));\r",
									"pm.environment.set('randomDescription', pm.variables.replaceIn ('{{$randomLoremSentences}}'))\r",
									"\r",
									"// Data aleatória (dentro dos próximos 30 dias)\r",
									"const randomDays = Math.floor(Math.random() * 30);\r",
									"const randomDate = new Date();\r",
									"randomDate.setDate(randomDate.getDate() + randomDays);\r",
									"\r",
									"pm.environment.set(\"randomTaskDate\", randomDate.toISOString());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('check title is true', function () {\r",
									"    const randomTitle = pm.variables.get(\"randomTitle\");\r",
									"    const responseTitle = JSON.parse(responseBody).responseObject.title; \r",
									"    pm.expect(randomTitle).to.eql(responseTitle); // Compara os dois valores\r",
									"});\r",
									"pm.test('check description is true', function () {\r",
									"    const randomDescription = pm.variables.get(\"randomDescription\"); \r",
									"    const responseDescription = JSON.parse(responseBody).responseObject.description; \r",
									"    pm.expect(randomDescription).to.eql(responseDescription); // Compara os dois valores\r",
									"});\r",
									"pm.test('check date is true', function () {\r",
									"    const randomTaskDate = new Date(pm.variables.get(\"randomTaskDate\"));\r",
									"    const responseDate = new Date(JSON.parse(responseBody).responseObject.date);\r",
									"    \r",
									"    // Arredonda as datas para remover os milissegundos antes de comparar\r",
									"    pm.expect(randomTaskDate.toISOString().slice(0, -5)).to.eql(responseDate.toISOString().slice(0, -5)); \r",
									"});\r",
									"const flashMessage = pm.response.headers.get('x-flash-success');\r",
									"pm.test(\"should return a sucess Flash message \", function () {\r",
									"    pm.expect(flashMessage).to.eql('Tarefa editada com sucesso');\r",
									"});\r",
									"if(!flashMessage){\r",
									"    console.log('flash error: ' + pm.response.headers.get('x-flash-error'))\r",
									"    pm.test(\"logs\", function() {\r",
									"         console.log('Request Details:', {\r",
									"            url: pm.request.url.toString(),\r",
									"            method: pm.request.method,\r",
									"            headers: pm.request.headers.toJSON(),\r",
									"            body: pm.request.body ? pm.request.body.toString() : 'No Body'\r",
									"        });\r",
									"\r",
									"        console.log('Response Details:', {\r",
									"            status: pm.response.code,\r",
									"            headers: pm.response.headers.all(),\r",
									"            body: pm.response.text()\r",
									"        });\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "JSON",
								"value": "true",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "{{CookieAuth}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3MmZkM2YxOWY0MDc4OTViMTg3YjY5NiIsImlhdCI6MTczMzYwMzQ3NywiZXhwIjoxNzMzNjA3MDc3fQ.wx2yF2HPiKoU0hVk0zV-QJJDHEpps3Mcjiw4UGPE-ag",
									"type": "text"
								},
								{
									"key": "title",
									"value": "{{randomTitle}}",
									"type": "text"
								},
								{
									"key": "description",
									"value": "{{randomDescription}}",
									"type": "text"
								},
								{
									"key": "date",
									"value": "{{randomTaskDate}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/tarefa/editar",
							"host": [
								"{{url}}"
							],
							"path": [
								"tarefa",
								"editar"
							]
						},
						"description": "tests feitos usando runner e massa de dados, validando a veracidade dos dados retornados e se a tarefa foi editada"
					},
					"response": []
				}
			]
		},
		{
			"name": "usuario",
			"item": [
				{
					"name": "/registro/novo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const flashMessage = pm.response.headers.get('x-flash-success');\r",
									"pm.test(\"should return a sucess Flash message \", function () {\r",
									"    pm.expect(flashMessage).to.eql('Usuário criado com sucesso! Acesse sua conta!');\r",
									"    console.log('delete a conta manualmente usando deleteMany({userName: delete})')\r",
									"});\r",
									"if(!flashMessage){\r",
									"    console.log('flash error: ' + pm.response.headers.get('x-flash-error'))\r",
									"    pm.test(\"logs\", function() {\r",
									"         console.log('Request Details:', {\r",
									"            url: pm.request.url.toString(),\r",
									"            method: pm.request.method,\r",
									"            headers: pm.request.headers.toJSON(),\r",
									"            body: pm.request.body ? pm.request.body.toString() : 'No Body'\r",
									"        });\r",
									"\r",
									"        console.log('Response Details:', {\r",
									"            status: pm.response.code,\r",
									"            headers: pm.response.headers.all(),\r",
									"            body: pm.response.text()\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "no-redirect",
								"value": "true",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "userName",
									"value": "delete",
									"type": "text"
								},
								{
									"key": "email",
									"value": "{{$randomEmail}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123123",
									"type": "text"
								},
								{
									"key": "password2",
									"value": "123123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/usuarios/registro/novo",
							"host": [
								"{{url}}"
							],
							"path": [
								"usuarios",
								"registro",
								"novo"
							]
						},
						"description": "tests avaliando se o usuario já existe na db, se a conta pode ser criada, e se existe outros erros (senhas se diferem, email inexistente...)"
					},
					"response": []
				},
				{
					"name": "/registro",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"CookieAuth exists\", function () {\r",
									"    pm.expect(pm.environment.get('CookieAuth')).to.not.be.null; // Verifica se a variável CookieAuth não é null\r",
									"    pm.expect(pm.environment.get('CookieAuth')).to.not.be.undefined; // Verifica se a variável CookieAuth não é undefined\r",
									"});\r",
									"console.log('cookieauth: ' + pm.environment.get('CookieAuth'))\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/usuarios/registro",
							"host": [
								"{{url}}"
							],
							"path": [
								"usuarios",
								"registro"
							]
						}
					},
					"response": []
				},
				{
					"name": "/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/usuarios/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"usuarios",
								"login"
							]
						},
						"description": "deve retornar a pagina usuarios/login"
					},
					"response": []
				}
			]
		},
		{
			"name": "usuario/logout",
			"item": [
				{
					"name": "/logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const flashMessage = pm.response.headers.get('x-flash-success');\r",
									"pm.test('should return success flash message', function () {\r",
									"    pm.expect(flashMessage).to.eql('Conta Deslogada!')\r",
									"})\r",
									"if(!flashMessage){\r",
									"    console.log('flash error: ' + pm.response.headers.get('x-flash-error'))\r",
									"    pm.test(\"logs\", function() {\r",
									"         console.log('Request Details:', {\r",
									"            url: pm.request.url.toString(),\r",
									"            method: pm.request.method,\r",
									"            headers: pm.request.headers.toJSON(),\r",
									"            body: pm.request.body ? pm.request.body.toString() : 'No Body'\r",
									"        });\r",
									"\r",
									"        console.log('Response Details:', {\r",
									"            status: pm.response.code,\r",
									"            headers: pm.response.headers.all(),\r",
									"            body: pm.response.text()\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "no-redirect",
								"value": "true",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/usuarios/logout",
							"host": [
								"{{url}}"
							],
							"path": [
								"usuarios",
								"logout"
							]
						},
						"description": "verifica se a conta foi deslogada"
					},
					"response": []
				}
			],
			"description": "aqui onde o cookie de login perde o seu valor e deixa de se usado na aplicação"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "date",
			"value": "2024-12-13"
		},
		{
			"key": "randomTitle",
			"value": ""
		},
		{
			"key": "randomDescription",
			"value": ""
		},
		{
			"key": "randomTaskDate",
			"value": ""
		}
	]
}