{
	"info": {
		"_postman_id": "bb0891db-db5b-4769-b303-1707ce991657",
		"name": "taskApp",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40126037"
	},
	"item": [
		{
			"name": "app",
			"item": [
				{
					"name": "tarefas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Each task has required properties\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach(task => {\r",
									"        pm.expect(task).to.have.property(\"title\");\r",
									"        pm.expect(task).to.have.property(\"date\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/tarefas?data=2024-12-07",
							"host": [
								"{{url}}"
							],
							"path": [
								"tarefas"
							],
							"query": [
								{
									"key": "data",
									"value": "2024-12-07"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "'/' disconnected",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "'/' connected",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "tarefa",
			"item": [
				{
					"name": "/add",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/tarefa/add",
							"host": [
								"{{url}}"
							],
							"path": [
								"tarefa",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "/editar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"should return a sucess Flash message \", function () {\r",
									"    const flashMessage = pm.response.headers.get('x-flash-success');\r",
									"    pm.expect(flashMessage).to.eql('Tarefa encontrada com sucesso');\r",
									"});\r",
									"pm.test(\"should return a Error Flash message \", function () {\r",
									"    const flashMessage = pm.response.headers.get('x-flash-error');\r",
									"    pm.expect(flashMessage).to.eql('Tarefa não encontrada ou não autorizada');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/tarefa/editar/?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3MmZkM2YxOWY0MDc4OTViMTg3YjY5NiIsImlhdCI6MTczMzUyNjM2OCwiZXhwIjoxNzMzNTI5OTY4fQ.MHHX5E2xvHc4ubOzVSelOGDSDwSJZeJMnBLJfegj-As",
							"host": [
								"{{url}}"
							],
							"path": [
								"tarefa",
								"editar",
								""
							],
							"query": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3MmZkM2YxOWY0MDc4OTViMTg3YjY5NiIsImlhdCI6MTczMzUyNjM2OCwiZXhwIjoxNzMzNTI5OTY4fQ.MHHX5E2xvHc4ubOzVSelOGDSDwSJZeJMnBLJfegj-As"
								}
							]
						},
						"description": "tests que verificam se tarefa foi encontrada ou nao"
					},
					"response": []
				},
				{
					"name": "/novo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// pm.test('check title is true', function () {\r",
									"//     const randomTitle = pm.variables.get(\"randomTitle\"); // Obtém o valor armazenado\r",
									"//     const responseTitle = JSON.parse(responseBody).responseObject.title; // Obtém o título da resposta\r",
									"//     pm.expect(randomTitle).to.eql(responseTitle); // Compara os dois valores\r",
									"// });\r",
									"\r",
									"pm.test('check description is true', function () {\r",
									"    const randomDescription = pm.variables.get(\"randomDescription\"); // Obtém o valor armazenado\r",
									"    console.log(pm.variables.get(\"randomDescription\"))\r",
									"    const responseDescription = JSON.parse(responseBody).responseObject.description; // Obtém o título da resposta\r",
									"    pm.expect(randomDescription).to.eql(responseDescription); // Compara os dois valores\r",
									"});\r",
									"\r",
									"pm.test('check date is true', function () {\r",
									"    const randomTaskDate = new Date(pm.variables.get(\"randomTaskDate\"));\r",
									"    const responseDate = new Date(JSON.parse(responseBody).responseObject.date);\r",
									"    \r",
									"    // Arredonda as datas para remover os milissegundos antes de comparar\r",
									"    pm.expect(randomTaskDate.toISOString().slice(0, -5)).to.eql(responseDate.toISOString().slice(0, -5)); \r",
									"});\r",
									"pm.test(\"should return a Error of validation form \", function () {\r",
									"    const flashMessage = pm.response.headers.get('x-flash-error');\r",
									"    pm.expect(flashMessage).to.eql('validação de formulário');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"randomTitle\", pm.variables.replaceIn ('{{$randomFullName}}'));\r",
									"pm.environment.set('randomDescription', pm.variables.replaceIn ('{{$randomLoremSentences}}'))\r",
									"\r",
									"// Data aleatória (dentro dos próximos 30 dias)\r",
									"const randomDays = Math.floor(Math.random() * 30);\r",
									"const randomDate = new Date();\r",
									"randomDate.setDate(randomDate.getDate() + randomDays);\r",
									"\r",
									"pm.environment.set(\"randomTaskDate\", randomDate.toISOString());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "JSON",
								"value": "true",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "title",
									"value": "delete",
									"type": "text"
								},
								{
									"key": "description",
									"value": "{{randomDescription}}",
									"type": "text"
								},
								{
									"key": "date",
									"value": "{{randomTaskDate}}",
									"type": "text"
								},
								{
									"key": "",
									"value": "{{$randomLoremSentences}}",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/tarefa/novo",
							"host": [
								"{{url}}"
							],
							"path": [
								"tarefa",
								"novo"
							]
						},
						"description": "tests que validam se as tarefas foram criadas e com campos corretos"
					},
					"response": []
				},
				{
					"name": "/deletar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"should return a sucess Flash message \", function () {\r",
									"    const flashMessage = pm.response.headers.get('x-flash-success');\r",
									"    pm.expect(flashMessage).to.eql('Tarefa deletada com sucesso');\r",
									"});\r",
									"pm.test(\"should return a Error Flash message \", function () {\r",
									"    const flashMessage = pm.response.headers.get('x-flash-error');\r",
									"    pm.expect(flashMessage).to.eql('Tarefa não encontrada ou não autorizada');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3MmZkM2YxOWY0MDc4OTViMTg3YjY5NiIsImlhdCI6MTczMzQzOTMzNiwiZXhwIjoxNzMzNDQyOTM2fQ.ev04xGkbFGyW15J7yZHEKqQ71CRvGU0jcQN3A1cKtFU",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/tarefa/deletar",
							"host": [
								"{{url}}"
							],
							"path": [
								"tarefa",
								"deletar"
							]
						},
						"description": "testa se a tarefa foi deletada ou não usando headers como condição"
					},
					"response": []
				},
				{
					"name": "/editar",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"randomTitle\", pm.variables.replaceIn ('{{$randomFullName}}'));\r",
									"pm.environment.set('randomDescription', pm.variables.replaceIn ('{{$randomLoremSentences}}'))\r",
									"\r",
									"// Data aleatória (dentro dos próximos 30 dias)\r",
									"const randomDays = Math.floor(Math.random() * 30);\r",
									"const randomDate = new Date();\r",
									"randomDate.setDate(randomDate.getDate() + randomDays);\r",
									"\r",
									"pm.environment.set(\"randomTaskDate\", randomDate.toISOString());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('check title is true', function () {\r",
									"    const randomTitle = pm.variables.get(\"randomTitle\"); // Obtém o valor armazenado\r",
									"    const responseTitle = JSON.parse(responseBody).responseObject.title; // Obtém o título da resposta\r",
									"    pm.expect(randomTitle).to.eql(responseTitle); // Compara os dois valores\r",
									"});\r",
									"pm.test('check description is true', function () {\r",
									"    const randomDescription = pm.variables.get(\"randomDescription\"); // Obtém o valor armazenado\r",
									"    console.log(pm.variables.get(\"randomDescription\"))\r",
									"    const responseDescription = JSON.parse(responseBody).responseObject.description; // Obtém o título da resposta\r",
									"    pm.expect(randomDescription).to.eql(responseDescription); // Compara os dois valores\r",
									"});\r",
									"pm.test('check date is true', function () {\r",
									"    const randomTaskDate = new Date(pm.variables.get(\"randomTaskDate\"));\r",
									"    const responseDate = new Date(JSON.parse(responseBody).responseObject.date);\r",
									"    \r",
									"    // Arredonda as datas para remover os milissegundos antes de comparar\r",
									"    pm.expect(randomTaskDate.toISOString().slice(0, -5)).to.eql(responseDate.toISOString().slice(0, -5)); \r",
									"});\r",
									"pm.test(\"should return a Error Flash message \", function () {\r",
									"    const flashMessage = pm.response.headers.get('x-flash-error');\r",
									"    pm.expect(flashMessage).to.eql('Houve um erro ao encontrar a Tarefa');\r",
									"});\r",
									"pm.test(\"should return a Error of validation form \", function () {\r",
									"    const flashMessage = pm.response.headers.get('x-flash-error');\r",
									"    pm.expect(flashMessage).to.eql('validação de formulário');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "JSON",
								"value": "true",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3MmZkM2YxOWY0MDc4OTViMTg3YjY5NiIsImlhdCI6MTczMzYwMzQ3NywiZXhwIjoxNzMzNjA3MDc3fQ.wx2yF2HPiKoU0hVk0zV-QJJDHEpps3Mcjiw4UGPE-ag",
									"type": "text"
								},
								{
									"key": "title",
									"value": "{{randomTitle}}",
									"type": "text"
								},
								{
									"key": "description",
									"value": "{{randomDescription}}",
									"type": "text"
								},
								{
									"key": "date",
									"value": "{{randomTaskDate}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/tarefa/editar",
							"host": [
								"{{url}}"
							],
							"path": [
								"tarefa",
								"editar"
							]
						},
						"description": "tests feitos usando runner e massa de dados, validando a veracidade dos dados retornados e se a tarefa foi editada"
					},
					"response": []
				}
			]
		},
		{
			"name": "usuario",
			"item": [
				{
					"name": "/registro",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/usuarios/registro",
							"host": [
								"{{url}}"
							],
							"path": [
								"usuarios",
								"registro"
							]
						}
					},
					"response": []
				},
				{
					"name": "/login",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/usuarios/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"usuarios",
								"login"
							]
						},
						"description": "deve retornar a pagina usuarios/login"
					},
					"response": []
				},
				{
					"name": "/logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('when account logouted should return success flash message', function () {\r",
									"    const flashMessage = pm.response.headers.get('x-flash-success')\r",
									"    pm.expect(flashMessage).to.eql('Conta Deslogada!')\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/usuarios/logout",
							"host": [
								"{{url}}"
							],
							"path": [
								"usuarios",
								"logout"
							]
						},
						"description": "verifica se a conta foi deslogada"
					},
					"response": []
				},
				{
					"name": "/registro/novo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"should return a sucess Flash message \", function () {\r",
									"    const flashMessage = pm.response.headers.get('x-flash-success');\r",
									"    pm.expect(flashMessage).to.eql('Usuário criado com sucesso! Acesse sua conta!');\r",
									"});\r",
									"pm.test(\"should return a error flash message\", function () {\r",
									"    const flashMessage = pm.response.headers.get('x-flash-error');\r",
									"    pm.expect(flashMessage)\r",
									"});\r",
									"pm.test(\"should return Error if account exists\", function () {\r",
									"    const flashMessage = pm.response.headers.get('x-flash-error');\r",
									"    pm.expect(flashMessage).to.eql('Já existe uma conta com este e-mail no nosso sistema!');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "userName",
									"value": "sfddf",
									"type": "text"
								},
								{
									"key": "email",
									"value": "bosil@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123123",
									"type": "text"
								},
								{
									"key": "password2",
									"value": "123123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/usuarios/registro/novo",
							"host": [
								"{{url}}"
							],
							"path": [
								"usuarios",
								"registro",
								"novo"
							]
						},
						"description": "tests avaliando se o usuario já existe na db, se a conta pode ser criada, e se existe outros erros (senhas se diferem, email inexistente...)"
					},
					"response": []
				},
				{
					"name": "/login/novo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"should return a sucess Flash message \", function () {\r",
									"    const flashMessage = pm.response.headers.get('x-flash-success');\r",
									"    pm.expect(flashMessage).to.eql('Login realizado com sucesso!');\r",
									"});\r",
									"pm.test(\"should return a Error Flash message \", function () {\r",
									"    const flashMessage = pm.response.headers.get('x-flash-error');\r",
									"    pm.expect(flashMessage).to.eql('Conta inexistente ou senha incorreta');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "connect.sid",
								"value": "s:dPaIAb8PCDWkDcrXcCijenrC0ESQkrAX.3nr7W/QW8aCMAojubZ42VIrJdJhCpROoCHIVZ3wFRyI",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "gabrielsil20177@gmail.com",
									"type": "text"
								},
								{
									"key": "senha",
									"value": "123123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/usuarios/login/novo",
							"host": [
								"{{url}}"
							],
							"path": [
								"usuarios",
								"login",
								"novo"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}